# Docker
*.log
*.tmp
*.pid
*.swp
*.swo
*.bak
*.orig
*.rej
*.sublime-project
*.sublime-workspace
*.DS_Store
*.vscode/
*.idea/
*.env
.env.*

# Terraform
*.tfstate
*.tfstate.*
*.terraform/
crash.log
override.tf
override.tf.json
terraform.tfvars
terraform.tfvars.json
*.tfplan

# GCP
*.json
*.p12
*.pem

# Kafka
logs/
data/
tmp/

# Python
__pycache__/
*.py[cod]
*.pyo
*.pyd
*.pdb
*.egg
*.egg-info/
dist/
build/
*.egg-info/
*.eggs/
*.manifest
*.spec

# Virtual Environments
.venv/
venv/
ENV/
env.bak/
venv.bak/

# Data folders
data/

# Google Cloud Platform Credentials
.google/

# Local .terraform directories
/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Notebooks
note.ipynb